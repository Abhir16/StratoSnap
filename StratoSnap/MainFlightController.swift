//
//  ViewController.swift
//  StratoSnap
//
//  Created by Abhishek  Ravi on 2018-12-15.
//  Copyright Â© 2018 Abhishek  Ravi. All rights reserved.
//

import UIKit
import Photos
import AVFoundation
import Vision
/// TODO: add http requests to drones control system indicating whether to position gimbal up or down based on adjustment algorithm
class MainFlightController: UIViewController {
    
    //@IBOutlet var capturePreviewView: PreviewView!
    
    let cameraController = CameraController()
    
    
    private lazy var capturePreviewView: PreviewView = {
        let view = PreviewView()
        view.backgroundColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 1)
        view.alpha = 1.0
        return view
    }()
    
    var info: FlightSettings?
    
    @objc func captureClicked(_ sender: Any) {
        cameraController.captureImage {(image, error) in
            guard let image = image else {
                print(error ?? "Image capture error")
                return
            }
            print("Image Captured!")
            
            try? PHPhotoLibrary.shared().performChangesAndWait {// save to library
                PHAssetChangeRequest.creationRequestForAsset(from: image)
            }
        }
    }
    ///Displays a preview of the video output generated by the device's cameras.
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        AppUtility.lockOrientation(.landscape)
        // Or to rotate and lock
        // AppUtility.lockOrientation(.portrait, andRotateTo: .portrait)
        
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        // Don't forget to reset when view is being removed
        AppUtility.lockOrientation(.all)
    }
    
    override var prefersStatusBarHidden: Bool { return true }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        /// temporary capture button, will remove in next pull request
        let captureButton = UIButton(frame: CGRect(x: 100, y: 100, width: 100, height: 50))
        captureButton.backgroundColor = .blue
        
        captureButton.setTitle("CAPTURE", for: .normal)
        
        captureButton.addTarget(self, action: #selector(captureClicked), for: .touchUpInside)
        self.capturePreviewView.addSubview(captureButton)
        // Do any additional setup after loading the view, typically from a nib.
        //capturePreviewView.session = cameraController.captureSession
        self.navigationController?.setNavigationBarHidden(true, animated: true)
        
        view.addSubview(capturePreviewView)
        capturePreviewView.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            capturePreviewView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            capturePreviewView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            capturePreviewView.topAnchor.constraint(equalTo: view.topAnchor),
            capturePreviewView.bottomAnchor.constraint(equalTo:view.bottomAnchor)
        ])
        
        
        print("hello world")
        print(info?.position)
        print(info?.height)
        print(info?.altitude)
        
        cameraController.delegate = self
        func configureCameraController() {
            cameraController.prepare {(error) in
                if let error = error {
                    print(error)
                }
                try? self.cameraController.displayPreview(on: self.capturePreviewView)
                self.capturePreviewView.createBoundBoxLayer(settings: self.info!)
            }
        }
        configureCameraController()
    }
}

extension MainFlightController: CameraControllerDelegate {
    
    func captured(image: UIImage) {
        DispatchQueue.main.async(execute: {
            print("esketit")
        })
    }
    func handleFaces(request: VNRequest, error: Error?) {
        print("handling faces!!")
        DispatchQueue.main.async {
            //perform all the UI updates on the main queue
            guard let results = request.results as? [VNFaceObservation] else { return }
            self.capturePreviewView.removeMask()
            for face in results {
                self.capturePreviewView.drawFaceboundingBox(face: face)
            }
        }
    }
}
